name: 'Terraform GitHub Actions'

on:
  pull_request:

jobs:
  docs:
    name: Generate & Inject Inputs/Outputs Table
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.DOCS_PAT }}

    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1
      with:
        working-dir: .
        config-file: .terraform-docs.yaml
        output-file: README.md
        output-method: inject
        git-push: "true"
  terraform:
    name: Terraform Format, Initialize, Validate, Plan
    needs: [docs]
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: "github_actions"
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -diff -check -no-color -recursive
        working-directory: ./
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -no-color
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true

      - uses: actions/github-script@v6.1.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          TF_FMT_STDOUT: "${{ steps.fmt.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå - \`${{ steps.fmt.outcome }}\`

            \`\`\`diff
            ${process.env.TF_FMT_STDOUT}
            \`\`\`

            #### Terraform Initialization ‚öôÔ∏è - \`${{ steps.init.outcome }}\`
            #### Terraform Validate üìÉ - \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ - \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workdir: \`${{ env.WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   id: apply
      #   if: github.ref == 'refs/heads/release' && github.event_name == 'push'
      #   run: terraform apply -auto-approve
      #   working-directory: ${{ env.WORKING_DIR }}